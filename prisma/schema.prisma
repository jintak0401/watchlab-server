// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Language {
  en
  ko
  jp
  zh
}

enum Role {
  admin
  manager
  user
}

enum WriterType {
  main
  sub
}

model Dictionary {
  id          Int      @id @default(autoincrement())
  word        String   @db.VarChar(63) @unique
  description String   @db.VarChar(1023)
  language    Language @default(en)
}

model Gallery {
  id          Int    @id @default(autoincrement())
  image       String @db.VarChar(255)
  title       String @db.VarChar(255)
  description String @db.Text
  language    Language @default(en)
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @db.VarChar(255) @unique
  role      Role     @default(user)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

model Writer {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(31) @unique
  image        String         @db.VarChar(255)
  type         WriterType
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deleted      Boolean        @default(false)
  posts        Post[]
}

model Tag {
    id      Int    @id @default(autoincrement())
    name    String @db.VarChar(31) @unique
    posts   TagsOnPosts[]
}


model Post {
  id           Int            @id @default(autoincrement())
  slug         String         @db.VarChar(127)
  thumbnail    String         @db.VarChar(255)
  title        String         @db.VarChar(255)
  content      String         @db.LongText
  language     Language       @default(en)
  view         Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  tags         TagsOnPosts[]
  recommendedBy  Recommend[]  @relation("recommending")
  recommending   Recommend[]  @relation("recommender")
  writer       String
  writerRelation      Writer         @relation(fields: [writer], references: [name])

  @@unique([slug, language])
}

model Recommend {
    recommender Post @relation("recommender", fields: [recommenderId], references: [id])
    recommenderId Int
    recommending Post @relation("recommending", fields: [recommendingId], references: [id])
    recommendingId Int

    @@id([recommenderId, recommendingId])
}

model TagsOnPosts {
  postId Int
  tagId  Int
  post   Post @relation(fields: [postId], references: [id])
  tag    Tag  @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
}
